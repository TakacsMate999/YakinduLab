package hu.bme.mit.yakindu.analysis.workhere;

import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.junit.Test;
import org.yakindu.sct.model.sgraph.State;
import org.yakindu.sct.model.sgraph.Statechart;
import org.yakindu.sct.model.sgraph.Transition;
import org.yakindu.sct.model.stext.stext.VariableDefinition;
import org.yakindu.sct.model.sgraph.Reaction;

import hu.bme.mit.model2gml.Model2GML;
import hu.bme.mit.yakindu.analysis.example.ExampleStatemachine;
import hu.bme.mit.yakindu.analysis.modelmanager.ModelManager;
import java.util.*;

import javax.lang.model.element.VariableElement;

public class Main {
	@Test
	public void test() {
		main(new String[0]);
	}
	
	public static void main(String[] args) {
		ModelManager manager = new ModelManager();
		Model2GML model2gml = new Model2GML();
		
		// Loading model
		EObject root = manager.loadModel("model_input/example.sct");
		
		// Reading model
		Statechart s = (Statechart) root;
		TreeIterator<EObject> iterator = s.eAllContents();
		int unnamed = 0;
		
		while (iterator.hasNext()) {
			EObject content = iterator.next();
			if(content instanceof State) {
				State state = (State) content;
				List<Transition> tl  = state.getOutgoingTransitions();
				
			
				if(tl.isEmpty())
					System.out.println(state.getName()+" is a dead end!");
				if(state.getName() == null) {
					System.out.println("State with no name. Suggested name: State"+ unnamed);
					state.setName("State"+ unnamed++);
				}
				
			}
			if(content instanceof Transition) {
				Transition trans = (Transition) content;
				System.out.println(trans.getSource().getName() + " -> " +trans.getTarget().getName());
				
				
			}
			if(content instanceof VariableDefinition) {
				VariableDefinition ve = (VariableDefinition) content;
				if(ve.getName().equals("whiteTime"))
					System.out.println("W = "+ve.getName());
				else if(ve.getName().equals("blackTime"))
					System.out.println("B = "+ve.getName());
			}
		}
		
		// Transforming the model into a graph representation
		String content = model2gml.transform(root);
		// and saving it
		manager.saveFile("model_output/graph.gml", content);
	}
}
